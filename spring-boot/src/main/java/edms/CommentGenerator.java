package edms;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.internal.DefaultCommentGenerator;
import org.mybatis.generator.internal.util.StringUtility;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * 自定义注释生成器
 *
 * @author 74765
 */
public class CommentGenerator extends DefaultCommentGenerator {
  SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy/MM/dd hh:mm");

  @Override
  public void addJavaFileComment(CompilationUnit compilationUnit) {
    List<String> fileCommentLines = compilationUnit.getFileCommentLines();
    fileCommentLines.add("/**");
    fileCommentLines.add(" * @author " + "李重辰");
    fileCommentLines.add(" * @date   " + dateFormatter.format(new Date()));
    fileCommentLines.add(" */");
    System.out.println(compilationUnit.getType().getFullyQualifiedName());
  }

  @Override
  public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
    myClassComment(topLevelClass, introspectedTable);
  }

  @Override
  public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
    field.addJavaDocLine("/**"); //$NON-NLS-1$
    String remarks = introspectedColumn.getRemarks();
    if (StringUtility.stringHasValue(remarks)) {
      String[] remarkLines = remarks.split(System.getProperty("line.separator")); //$NON-NLS-1$
      for (String remarkLine : remarkLines) {
        field.addJavaDocLine(" *   " + remarkLine); //$NON-NLS-1$
      }
    }

    field.addJavaDocLine(" *"); //$NON-NLS-1$
    field.addJavaDocLine(" * This field was generated by MyBatis Generator."); //$NON-NLS-1$

    StringBuilder sb = new StringBuilder();
    sb.append(" * This field corresponds to the database column "); //$NON-NLS-1$
    sb.append(introspectedTable.getFullyQualifiedTable());
    sb.append('.');
    sb.append(introspectedColumn.getActualColumnName());
    field.addJavaDocLine(sb.toString());

    addJavadocTag(field, false);

    field.addJavaDocLine(" */"); //$NON-NLS-1$
  }

  @Override
  public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
    super.addFieldComment(field, introspectedTable);
  }

  /**
   * 公用代码
   *
   * @param innerClass        、
   * @param introspectedTable 、
   */
  private void myClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
    // 获取表注释
    String remarks = introspectedTable.getRemarks();
    innerClass.addJavaDocLine("/**");
    if (!"".equals(remarks)) {
      innerClass.addJavaDocLine(" * " + remarks);
      innerClass.addJavaDocLine(" *");
    }
    innerClass.addJavaDocLine(" * @author " + "李重辰");
    innerClass.addJavaDocLine(" * @date   " + dateFormatter.format(new Date()));
    innerClass.addJavaDocLine(" */");
    System.out.println(innerClass.getClass().getSimpleName());
  }

  @Override
  public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
    myClassComment(innerClass, introspectedTable);
  }

  @Override
  public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
    myClassComment(innerClass, introspectedTable);
  }
}
