<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.basic.dao.EmployeeMapper2">
    <!--
        自定义某个javaBean的封装规则
        Type: 自定义规则的java类型
        id：唯一的ID引用
     -->
    <resultMap id="MyEmp" type="mybatis.basic.bean.Employee">
        <!--
            指定主键列的封装规则
            id定义主键会底层进行优化
            column:数据表的类名
            property:JavaBean的字段名
        -->
        <id column="id" property="id"/>
        <!-- 定义普通列的封装规则，不指定的列可以自动封装。推荐把所有的列映射规则都写上 -->
        <result column="emp_name" property="empName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>

    <select id="getEmpById" resultMap="MyEmp">
        select *
        from tbl_emp
        where id = #{id}
    </select>

    <select id="getEmpsByDeptId" resultMap="MyEmp">
        select id, emp_name, gender, email
        from tbl_emp
        where d_id = #{deptId}
    </select>

    <!--
        eg1:
            查询emp的同时查出相应的department
     -->
    <!-- 联合查询:级联属性封装结果集 -->
    <resultMap id="complexEmp" type="Employee">
        <id column="id" property="id"/>
        <result column="emp_name" property="empName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="dept_name" property="department.name"/>
    </resultMap>

    <!--
        使用association定义关联的单个对象的封装规则
     -->
    <resultMap id="complexEmp2" type="Employee">
        <id column="id" property="id"/>
        <result column="emp_name" property="empName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
            association可以指定联合的javaBean对象
            property指定哪个属性是联合的对象
            javaType指定属性的类型(不可省略)
        -->
        <association property="department" javaType="mybatis.basic.bean.Department">
            <id column="deptId" property="id"/>
            <result column="dept_name" property="name"/>
        </association>
    </resultMap>
    <select id="getEmpAndDept" resultMap="empDis">
        select a.id, a.emp_name, a.gender, a.email, b.dept_name, b.id as deptId
        from tbl_emp as a,
             tbl_dept as b
        where a.d_id = b.id
          and a.id = #{id}
    </select>

    <!-- 使用association进行分步查询 -->
    <resultMap id="EmpByStep" type="Employee">
        <id column="id" property="id"/>
        <result column="emp_name" property="empName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
            select:表明当前的属性是调用的select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法
         -->
        <association property="department" select="mybatis.basic.dao.DepartmentMapper.getDeptById" column="d_id"/>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="EmpByStep">
        select id, emp_name, gender, email, d_id
        from tbl_emp
        where id = #{id}
    </select>
    <!--
        可以使用延迟加载
        eg:Employee中包含部门信息,延迟加载指的是在使用部门信息的时候再去查询
        分段查询的基础上配置:
            <setting name="lazyLoadingEnabled" value="true"/>
            <setting name="aggressiveLazyLoading" value="false"/>
      -->

    <!--
    eg2:
        查询部门带出部门对应的所有员工信息 TO
          D:\Idea-workspace\Study_framework\conf\mybatis\dao\DepartmentMapper.xml
    -->

    <!--
        <discriminator javaType=""></discriminator>
        鉴别器;根据某列的值改变封装行为
        封装Employee,如果查出的是女生,就把部门信息查出来,否则不查询部门信息
    -->
    <resultMap id="empDis" type="mybatis.basic.bean.Employee">
        <id column="id" property="id"/>
        <result column="emp_name" property="empName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
            column:指定要判断的列名
            javaType:列值对应的java类型
         -->
        <discriminator javaType="string" column="gender">
            <case value="0" resultType="mybatis.basic.bean.Employee">
                <association property="department" javaType="mybatis.basic.bean.Department">
                    <id column="deptId" property="id"/>
                    <result column="dept_name" property="name"/>
                </association>
            </case>
            <case value="1" resultType="mybatis.basic.bean.Employee">
                <id column="id" property="id"/>
                <result column="emp_name" property="empName"/>
                <result column="gender" property="gender"/>
                <result column="email" property="email"/>
            </case>
        </discriminator>
    </resultMap>

    <update id="addEmpDeptId" parameterType="boolean">
        update tbl_emp
        set d_id = ${deptId}
        where id = #{id}
    </update>
</mapper>